version: 0.2
env:
  variables:
    IMAGE_REPO_NAME: 'gronda/api'
    IMAGE_TAG: 'development'
phases:
  # pre_build:
  #   commands:
  #     - echo Logging in to Amazon ECR...
  #     - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  # build:
  #   commands:
  #     - echo Building the Docker image...
  #     - envsubst < deploy/env.local.tpl > .env.local
  #     - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
  #     - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
  post_build:
    commands:
      # - echo Pushing the Docker image...
      # - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      # - echo Writing image definitions file...
      # - printf '[{"name":"gronda-api","imageUri":"%s"}]' $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG > imagedefinitions.json
      # - printf '{"ImageURI":"%s"}' $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG > imageDetail.json
      - echo Packaging the CloudFormation template...
      - aws cloudformation package --template-file deploy/template.yaml --output-template-file packaged.yaml --s3-bucket $DEPLOY_BUCKET
      - envsubst < deploy/template.config.tpl > template.configuration.json
artifacts:
  files:
    - imagedefinitions.json
    - imageDetail.json
    - template.yaml
    - template.configuration.json
    - packaged.yaml
  discard-paths: yes